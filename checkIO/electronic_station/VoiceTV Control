'''
The technologies are rapidly evolving - only 50 years ago a simple black-and-white TV was a luxury! And now even a cool big color TV
with remote control is a common thing. Let's try to improve our TV and add the voice control to it! To begin with, we’ll write the simple
prototype in Python. It’ll use the following commands:

first_channel() - turns on the first channel from the list.
last_channel() - turns on the last channel from the list.
turn_channel(N) - turns on the N channel. Pay attention that the channel numbers start from 1, not from 0.
next_channel() - turns on the next channel. If the current channel is the last one, turns on the first channel.
previous_channel() - turns on the previous channel. If the current channel is the first one, turns on the last channel.
current_channel() - returns the name of the current channel.
is_exist(N/'name') - gets 1 argument - the number N or the string 'name' and returns "Yes", if the channel N or 'name'
exists in the list, or "No"
- in the other case.
'''


class VoiceCommand:
    def __init__(self, channels):
        self.channel = channels[0]

        class SetAndGet(list):
            def __getitem__(self_list, item):
                self.channel = super(SetAndGet, self_list).__getitem__(item)
                return self.channel

            @property
            def current(self_list):
                return self_list.index(self.channel)

        self.channels = SetAndGet(channels)

    def first_channel(self):
        return self.channels[0]

    def last_channel(self):
        return self.channels[-1]

    def turn_channel(self, number):
        return self.channels[number-1]

    def next_channel(self):
        return self.turn_channel(1+1)

    def previous_channel(self):
        obj_ind = self.channels.index(self.next_channel())
        return self.channels[obj_ind-1]

    def current_channel(self):
        return self.channel

    def is_exist(self, inp):
        if inp in self.channels:
            return 'Yes'
        else:
            return 'No'


# class VoiceCommand(object):
#     def __init__(self, channels):
#         self.channel = channels[0]
# 
#         class SetAndGet(list):
#             def __getitem__(self_list, item):
#                 self.channel = super(SetAndGet, self_list).__getitem__(item)
#                 return self.channel
# 
#             @property
#             def current(self_list):
#                 return self_list.index(self.channel)
# 
#         self.channels = SetAndGet(channels)
# 
#     def first_channel(self):
#         return self.channels[0]
# 
#     def last_channel(self):
#         return self.channels[-1]
# 
#     def turn_channel(self, i):
#         return self.channels[i - 1]
# 
#     def next_channel(self):
#         return self.channels[(self.channels.current+1) % len(self.channels)]
# 
#     def previous_channel(self):
#         return self.channels[(self.channels.current - 1) % len(self.channels)]
# 
#     def current_channel(self):
#         return self.channel
# 
#     def is_exist(self, c):
#         return ('No', 'Yes')[type(c) is str and c in self.channels or 0 < c <= len(self.channels)]


if __name__ == '__main__':
    # These "asserts" using only for self-checking and not necessary for auto-testing

    CHANNELS = ["BBC", "Discovery", "TV1000"]

    controller = VoiceCommand(CHANNELS)

    assert controller.first_channel() == "BBC"
    assert controller.last_channel() == "TV1000"
    assert controller.turn_channel(1) == "BBC"
    assert controller.next_channel() == "Discovery"
    assert controller.previous_channel() == "BBC"
    assert controller.current_channel() == "BBC"
    assert controller.is_exist(4) == "No"
    assert controller.is_exist("TV1000") == "Yes"
    print("Coding complete? Let's try tests!")
